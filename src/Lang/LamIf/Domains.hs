module Lang.LamIf.Domains where

import FP
import Lang.LamIf.Values
import Lang.LamIf.Syntax

data ConcreteVal = 
    CInt ‚Ñ§ 
  | CClo Closure 
  | CFrame (Frame,Maybe ExpAddr)
  | CBot
  deriving (Eq,Ord)
makePrisms ''ConcreteVal
makePrettySum ''ConcreteVal

instance Val ConcreteVal 
  where
    intI = CInt
    isZeroE = elimMaybe bot (single ‚àò (‚âü) 0) ‚àò view cIntL
    delZero (CInt 0) = CBot
    delZero v = v
    cloI = CClo
    cloE = elimMaybe bot single ‚àò view cCloL
    frameI = CFrame
    frameE = elimMaybe bot single ‚àò view cFrameL
    Œ¥ o v‚ÇÅ v‚ÇÇ = elimMaybe CBot CInt $ do
      i‚ÇÅ ‚Üê view cIntL v‚ÇÅ
      i‚ÇÇ ‚Üê view cIntL v‚ÇÇ
      return $ case o of
        Plus ‚Üí i‚ÇÅ + i‚ÇÇ
        Minus ‚Üí i‚ÇÅ - i‚ÇÇ

data AbstractVal = 
    AInt ‚Ñ§
  | APos
  | AZero
  | ANeg
  | ANotZero
  | AAnyInt
  | AClo Closure
  | AFrame (Frame,Maybe ExpAddr)
  | ABot
  deriving (Eq, Ord)
makePrisms ''AbstractVal
makePrettySum ''AbstractVal

negateAbstractVal ‚à∑ AbstractVal ‚Üí AbstractVal
negateAbstractVal (AInt i) = AInt (negate i)
negateAbstractVal APos = ANeg
negateAbstractVal AZero = AZero
negateAbstractVal ANeg = APos
negateAbstractVal AAnyInt = AAnyInt
negateAbstractVal v = v

instance Val AbstractVal
  where
    intI = AInt
    isZeroE (AInt i) = single $ i ‚âü 0
    isZeroE APos = single False
    isZeroE AZero = single True
    isZeroE ANeg = single False
    isZeroE AAnyInt = set [True,False]
    isZeroE _ = bot
    delZero (AInt 0) = ABot
    delZero AZero = ABot
    delZero AAnyInt = ANotZero
    delZero v = v
    cloI = AClo
    cloE = elimMaybe bot single ‚àò view aCloL
    frameI = AFrame
    frameE = elimMaybe bot single ‚àò view aFrameL
    -- TODO: handle NotZero
    Œ¥ Plus (AInt i‚ÇÅ) (AInt i‚ÇÇ) = case (i‚ÇÅ + i‚ÇÇ) ‚ãö 0 of
      LT ‚Üí ANeg
      EQ ‚Üí AZero
      GT ‚Üí APos
    Œ¥ Plus (AInt i) APos = case i ‚ãö 0 of
      LT ‚Üí AAnyInt
      EQ ‚Üí APos
      GT ‚Üí APos
    Œ¥ Plus (AInt i) AZero = AInt i
    Œ¥ Plus (AInt i) ANeg = case i ‚ãö 0 of
      LT ‚Üí ANeg
      EQ ‚Üí ANeg
      GT ‚Üí AAnyInt
    Œ¥ Plus (AInt i) ANotZero = case i ‚ãö 0 of
      LT ‚Üí AAnyInt
      EQ ‚Üí ANotZero
      GT ‚Üí AAnyInt
    Œ¥ Plus (AInt _) AAnyInt = AAnyInt
    Œ¥ Plus APos APos = APos
    Œ¥ Plus APos AZero = APos
    Œ¥ Plus APos ANeg = AAnyInt
    Œ¥ Plus APos ANotZero = AAnyInt
    Œ¥ Plus APos AAnyInt = AAnyInt
    Œ¥ Plus AZero AZero = AZero
    Œ¥ Plus AZero ANeg = ANeg
    Œ¥ Plus AZero ANotZero = ANotZero
    Œ¥ Plus AZero AAnyInt = AAnyInt
    Œ¥ Plus ANeg ANeg = ANeg
    Œ¥ Plus ANeg ANotZero = AAnyInt
    Œ¥ Plus ANeg AAnyInt = AAnyInt
    Œ¥ Plus APos (AInt i) = Œ¥ Plus (AInt i) APos
    Œ¥ Plus AZero (AInt i) = Œ¥ Plus (AInt i) AZero
    Œ¥ Plus ANeg (AInt i) = Œ¥ Plus (AInt i) ANeg
    Œ¥ Plus ANotZero (AInt i) = Œ¥ Plus (AInt i) ANotZero
    Œ¥ Plus AAnyInt (AInt i) = Œ¥ Plus (AInt i) AAnyInt
    Œ¥ Plus AZero APos = Œ¥ Plus APos AZero
    Œ¥ Plus ANeg APos = Œ¥ Plus APos ANeg
    Œ¥ Plus ANotZero APos = Œ¥ Plus APos ANotZero
    Œ¥ Plus AAnyInt APos = Œ¥ Plus APos AAnyInt
    Œ¥ Plus ANeg AZero = Œ¥ Plus AZero ANeg
    Œ¥ Plus ANotZero AZero = Œ¥ Plus AZero ANotZero
    Œ¥ Plus AAnyInt AZero = Œ¥ Plus AZero AAnyInt
    Œ¥ Plus ANotZero ANeg = Œ¥ Plus ANeg ANotZero
    Œ¥ Plus AAnyInt ANeg = Œ¥ Plus ANeg AAnyInt
    Œ¥ Minus i‚ÇÅ i‚ÇÇ = Œ¥ Plus i‚ÇÅ (negateAbstractVal i‚ÇÇ)
    Œ¥ _ _ _ = ABot

instance (Ord val,Val val) ‚áí Val (ùí´ val) where
  intI = single ‚àò intI
  isZeroE = extendSet isZeroE
  delZero = mapSet delZero
  cloI = single ‚àò cloI
  cloE = extendSet cloE
  frameI = single ‚àò frameI
  frameE = extendSet frameE
  Œ¥ o vM‚ÇÅ vM‚ÇÇ = 
    vM‚ÇÅ ‚â´=* \ v‚ÇÅ ‚Üí
    vM‚ÇÇ ‚â´=* \ v‚ÇÇ ‚Üí
    single $ Œ¥ o v‚ÇÅ v‚ÇÇ

data DomainParam where
  DomainParam ‚à∑ ‚àÄ val. P val ‚Üí W (Ord val,POrd val,JoinLattice val,Val val,Difference val,Pretty val) ‚Üí DomainParam

concrete ‚à∑ DomainParam
concrete = DomainParam (P ‚à∑ P (ùí´ ConcreteVal)) W

abstract ‚à∑ DomainParam
abstract = DomainParam (P ‚à∑ P (ùí´ AbstractVal)) W
